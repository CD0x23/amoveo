//use market:teset3() to generate this compiled binary.

function market_key(market_id, expires, server_pubkey, period, oid){
    return ["market", 1, market_id, expires, server_pubkey, period, oid];
}
function market_contract(direction, expires, maxprice, server_pubkey, period, amount, oid, bet_height) {
  //var a = string_to_array(atob("AAAAJxAAAAAAAXgA"));
    var a = string_to_array(atob("AAAAJxAAAAAAAXgA"));
    var a2 = string_to_array(atob("AAAAAAJ4AA=="));
    var b = string_to_array(atob("AAAAAAN4AA=="));
    var c = string_to_array(atob("AAAAAAR4AA=="));
    var d = string_to_array(atob("AAAAAAV4AA=="));
    var e = string_to_array(atob("AAAAAAZ4AgAAAEE="));
    var f;
    if (direction == 1) {
        f = string_to_array(atob("C0hISEhIFEdIM3kEAAAAABAnAAAAMgIAAAAANXkGAAAAAF55BgAAAABHDUY6AAAAAACGFgAAAAMAAAACFBaHAQAAAAAUhyAAAAAAFIMUFoMUFoMUgxQURjoEAAAAABRHM3kEAAAAABAnAAAAHzNeeQMAAAAAHjIBAAAAADV5BgAAAAAUFBcUFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAABQNgIAAAAAFRgUFBQUSHgIAAAAADIBAAAAAHkIAAAAAEcNeQgAAAAARjoAAAAAADp5BQAAAACGFgAAAgAAAAIWhhYAAAIAAAAChwIAAAAAFoYWAAACAAAAAocCAAAAABaHBAAAAAAUFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAAApeQcAAAAAFxWHCgAAAAAUFBRGOgMAAAAAFEcAAAAAADJAQg8AAEBCDwAAAAAAAAAUFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAABSFBQXUDp5DAAAAAB5CwAAAAAUFBdQOh8UFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAAA3NQIAAAAAeQYAAAAAMx9IFBZHFEY2GR5IFEcUFkY2GRkfFngMAAAAABcUFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAABQNgIAAAAAFRgUFBQUSHgIAAAAADIBAAAAAHkIAAAAAEcNeQgAAAAARjoAAAAAADp5BQAAAACGFgAAAgAAAAIWhhYAAAIAAAAChwIAAAAAFoYWAAACAAAAAocCAAAAABaHBAAAAAAUFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAAApeQcAAAAAFxWHCgAAAAAeHngLAAAAABcUFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAABQNgIAAAAAFRgUFBQUSHgIAAAAADIBAAAAAHkIAAAAAEcNeQgAAAAARjoAAAAAADp5BQAAAACGFgAAAgAAAAIWhhYAAAIAAAAChwIAAAAAFoYWAAACAAAAAocCAAAAABaHBAAAAAAUFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAAApeQcAAAAAFxWHCgAAAAAUFBRGOgIAAAAAFEdISDMfFEcyHxRGOgAAAAAAHjMWRzI1ECcAAAA0M3kJAAAAABAnAAAAM3kEAAAAABAnAAAANRAnAAAANHkJAAAAABQURjp5BAAAAAAyFgAAAAAAeQoAAAAAFjN5AgAAAABAQg8AABQWFzRIAAAAAAAUFEczRjYZXnkDAAAAABhISEhIRw0UFEY6AAAAAAAURzN5BAAAAAAQJwAAAAMAAAAAAAAAAAAUFEY6AwAAAAAURzN5AQAAAAAQJwAAAAMAAAAAAAAAAAAUFEY6AgAAAAAUR3kBAAAAAAMAAAAAAAAAAAAUFEY6AQAAAACGFgAAAAMAAAACFBaHAQAAAAAUhyAAAAAAFIMUFoMUFoMUgxQeFBRIeAgAAAAAMgEAAAAAeQgAAAAARw15CAAAAABGOgAAAAAAUDYyFgAAAAAAeQQAAAAAFXgKAAAAABV4CQAAAAAXFBRIeAgAAAAAMgEAAAAAeQgAAAAARw15CAAAAABGOgAAAAAAUDYCAAAAABUYFBQUFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAAA6eQUAAAAAhhYAAAIAAAACFoYWAAACAAAAAocCAAAAABaGFgAAAgAAAAKHAgAAAAAWhwQAAAAAFBRIeAgAAAAAMgEAAAAAeQgAAAAARw15CAAAAABGOgAAAAAAKXkHAAAAABcVhwoAAAAAFhQURjoBAAAAABRHAAAAAAA1Fl4yFRV5BgAAAAAUFEY6AAAAAAAWeAgAAAAAyAAAAAB4BwAAAAA="));
    } else if (direction == 2) {
        f = string_to_array(atob("C0hISEhIFEdIM3kEAAAAABAnAAAAMgIAAAAANXkGAAAAAF55BgAAAABHDUY6AAAAAACGFgAAAAMAAAACFBaHAQAAAAAUhyAAAAAAFIMUFoMUFoMUgxQURjoEAAAAABRHM3kEAAAAABAnAAAAHzNeeQMAAAAAHjIBAAAAADV5BgAAAAAUFBcUFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAABQNgIAAAAAFRgUFBQUSHgIAAAAADIBAAAAAHkIAAAAAEcNeQgAAAAARjoAAAAAADp5BQAAAACGFgAAAgAAAAIWhhYAAAIAAAAChwIAAAAAFoYWAAACAAAAAocCAAAAABaHBAAAAAAUFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAAApeQcAAAAAFxWHCgAAAAAUFBRGOgMAAAAAFEcAAAAAADJAQg8AAEBCDwAAAAAAAAAUFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAABSFBQXUDp5DAAAAAB5CwAAAAAUFBdQOh8UFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAAA3NQIAAAAAeQYAAAAAMx9IFBZHFEY2GR5IFEcUFkY2GRkfFngMAAAAABcUFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAABQNgIAAAAAFRgUFBQUSHgIAAAAADIBAAAAAHkIAAAAAEcNeQgAAAAARjoAAAAAADp5BQAAAACGFgAAAgAAAAIWhhYAAAIAAAAChwIAAAAAFoYWAAACAAAAAocCAAAAABaHBAAAAAAUFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAAApeQcAAAAAFxWHCgAAAAAeHngLAAAAABcUFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAABQNgIAAAAAFRgUFBQUSHgIAAAAADIBAAAAAHkIAAAAAEcNeQgAAAAARjoAAAAAADp5BQAAAACGFgAAAgAAAAIWhhYAAAIAAAAChwIAAAAAFoYWAAACAAAAAocCAAAAABaHBAAAAAAUFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAAApeQcAAAAAFxWHCgAAAAAUFBRGOgIAAAAAFEdISDMfFEcyHxRGOgAAAAAAHjMWRzI1ECcAAAA0M3kJAAAAABAnAAAAM3kEAAAAABAnAAAANRAnAAAANHkJAAAAABQURjp5BAAAAAAzFhAnAAAAeQoAAAAAFjN5AgAAAABAQg8AABQWFzRIAAAAAAAUFEczRjYZXnkDAAAAABhISEhIRw0UFEY6AAAAAAAURzN5BAAAAAAQJwAAAAMAAAAAAAAAAAAUFEY6AwAAAAAURzN5AQAAAAAQJwAAAAMAAAAAAAAAAAAUFEY6AgAAAAAUR3kBAAAAAAMAAAAAAAAAAAAUFEY6AQAAAACGFgAAAAMAAAACFBaHAQAAAAAUhyAAAAAAFIMUFoMUFoMUgxQeFBRIeAgAAAAAMgEAAAAAeQgAAAAARw15CAAAAABGOgAAAAAAUDczFhAnAAAAeQQAAAAAFXgKAAAAABV4CQAAAAAXFBRIeAgAAAAAMgEAAAAAeQgAAAAARw15CAAAAABGOgAAAAAAUDYCAAAAABUYFBQUFEh4CAAAAAAyAQAAAAB5CAAAAABHDXkIAAAAAEY6AAAAAAA6eQUAAAAAhhYAAAIAAAACFoYWAAACAAAAAocCAAAAABaGFgAAAgAAAAKHAgAAAAAWhwQAAAAAFBRIeAgAAAAAMgEAAAAAeQgAAAAARw15CAAAAABGOgAAAAAAKXkHAAAAABcVhwoAAAAAFhQURjoBAAAAABRHAAAAAAA1Fl4yFRV5BgAAAAAUFEY6AAAAAAAWeAgAAAAAyAAAAAB4BwAAAAA="));
    } else {
        console.log("that is an invalid direction");
        console.log(direction);
        return("invalid direction to bet");
    }
    var g = a.concat(
        integer_to_array(bet_height, 4)).concat(
            a2).concat(
                integer_to_array(expires, 4)).concat(
                    b).concat(
                        integer_to_array(maxprice, 4)).concat(
                            c).concat(
                                integer_to_array(oid, 4)).concat(
                                    d).concat(
                                        integer_to_array(period, 4)).concat(
                                            e).concat(
                                                string_to_array(atob(server_pubkey))).concat(
                                                    f);
    var contract =  btoa(array_to_string(g));
    var codekey = market_key(oid, expires, server_pubkey, period, oid);
    return new_bet(contract, codekey, amount, [-7, direction, maxprice]);
}
function new_bet(code, key, amount, meta) {
    //key is insttructions on how to re-create the contract, so we can do pattern matching when updating channels.
    return ["bet", code, amount, key, meta];
}

function market_trade(cd, amount, price, bet, oid) {
                //var code_key = market_key(oid_final, expires, my_pubkey, period, oid_final);
    var market_spk = cd.me;
    console.log("market trade spk before ");
    console.log(JSON.stringify(market_spk));
    var cid = market_spk[7];
    var time_limit = 10000;//actually constants:time_limit div 10
    var space_limit = 100000;
    var cGran = 10000;
    var a = Math.floor((amount * price) / cGran);
    market_spk[4][0] = bet;
    market_spk[4] = ([-6]).concat(market_spk[4]);//add new bet to front
    market_spk[9] = market_spk[9] + 1; //nonce
    market_spk[6] = market_spk[6] + time_limit;// time_gas/10
    market_spk[5] = Math.max(market_spk[5], space_limit); //space_gas
    market_spk[8] = market_spk[8] - a; //amount
    console.log("market trade spk after ");
    console.log(JSON.stringify(market_spk));
    return market_spk;
}
